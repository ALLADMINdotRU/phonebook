from ldap3 import Server, Connection, ALL
from ldap3.core.exceptions import LDAPBindError
import base64 
from datetime import datetime, timezone


class LDAPManager:
    def __init__(self, server_url, user, password, base_dn, use_ssl=False):      #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å
        self.server_url = server_url
        self.user = user
        self.password = password
        self.base_dn = base_dn
        self.use_ssl = use_ssl  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É SSL
        self.connection = None

    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º LDAP."""
    def connect(self):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SSL
            if self.use_ssl:
                scheme = "ldaps://"
            else:
                scheme = "ldap://"

            server = Server(scheme +  self.server_url, get_info=ALL)
            self.connection = Connection(server, user=self.user, password=self.password, auto_bind=True)
            success_message = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LDAP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üòä"
            print(success_message)
            return True, success_message
        except LDAPBindError:
            error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É LDAP. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. üîç"
            print(error_message)
            return False, error_message
        except Exception as e:
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)} ‚ö†Ô∏è"
            print(error_message)
            return False, error_message

    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LDAP."""
    def add_user(self, user_dn, attributes):
        if not self.connection:
            print("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ! ‚ùå")
            return
        self.connection.add(user_dn, attributes=attributes)
        if self.connection.result['result'] == 0:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
        else:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.connection.result['description']} ‚ùå")


    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LDAP"""
    def get_uid_for_authenticated_user(self):
        if not self.connection:
            print("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ! ‚ùå")
            return None
        search_filter = f"(userPrincipalName={self.user})"
        self.connection.search(self.base_dn, search_filter, attributes=['objectGUID'])


        if self.connection.entries:
            entry = self.connection.entries[0]
            #guid = entry.objectGUID.value if 'objectGUID' in entry else None
            print(f"objectGUID –Ω–∞–π–¥–µ–Ω: {entry} üëç")
            return entry

        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")
        return None

    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
    def get_all_users(self, attributes=['cn', 'mail', 'telephoneNumber', 'mobile', 'title', 'department', 'thumbnailPhoto', 'objectGUID', 'whenCreated', 'whenChanged'], search_filter="(objectClass=person)"):
    
        if not self.connection:
            print("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ! ‚ùå")
            return []
        
        self.connection.search(self.base_dn, search_filter, attributes=attributes)
        
        users = []
        for entry in self.connection.entries:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ base64 –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            photo_base64 = None
            if 'thumbnailPhoto' in entry and entry.thumbnailPhoto.value:
                photo_base64 = base64.b64encode(entry.thumbnailPhoto.value).decode('utf-8')

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GUID –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            guid_str = None
            if 'objectGUID' in entry and entry.objectGUID.value:
                guid_str = entry.objectGUID.value

            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∫ naive datetime
            when_created = None
            when_changed = None
            
            if 'whenCreated' in entry and entry.whenCreated.value:                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ç—Ä–∏–±—É—Ç `whenCreated` –≤ –∑–∞–ø–∏—Å–∏ –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                when_created = entry.whenCreated.value                              # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –∏–∑ LDAP
                if when_created.tzinfo is not None:                                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ datetime –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                    when_created = when_created.astimezone(timezone.utc).replace(tzinfo=None)               # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ naive —É–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
            
            if 'whenChanged' in entry and entry.whenChanged.value:                  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ç—Ä–∏–±—É—Ç `whenChanged` –≤ –∑–∞–ø–∏—Å–∏ –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
                when_changed = entry.whenChanged.value                              # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –∏–∑ LDAP
                print(when_changed)
                if when_changed.tzinfo is not None:                                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ datetime –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                    when_changed = when_changed.astimezone(timezone.utc).replace(tzinfo=None)                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ naive —É–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ

            user_data = {
                'guid': guid_str,  # –î–æ–±–∞–≤–ª—è–µ–º GUID
                'cn': entry.cn.value if 'cn' in entry else None,
                'mail': entry.mail.value if 'mail' in entry else None,
                'telephone': entry.telephoneNumber.value if 'telephoneNumber' in entry else None,
                'mobile': entry.mobile.value if 'mobile' in entry else None,
                'title': entry.title.value if 'title' in entry else None,  # –î–æ–ª–∂–Ω–æ—Å—Ç—å
                'department': entry.department.value if 'department' in entry else None,  # –û—Ç–¥–µ–ª
                'photo': photo_base64,  # –§–æ—Ç–æ –≤ base64
                'when_created': when_created,
                'when_changed': when_changed
            }
            users.append(user_data)
        return users


    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ GUID"""
    def get_user_by_guid(self, guid):        
        search_filter = f"(objectGUID={guid})"
        users = self.get_all_users(search_filter)
        return users[0] if users else None


    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º LDAP."""
    def disconnect(self):
        if self.connection:
            self.connection.unbind()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LDAP –∑–∞–∫—Ä—ã—Ç–æ. üëã")